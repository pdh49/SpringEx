autowire="byName" : Autowiring using property name. If a bean found with same name as the property of other bean, this bean will be wired into other beans property
-변수명이 같은 자바빈이 있을경우 자동으로 주입해라

autowire="byType" : If a bean found with same type as the type of property of other bean, this bean will be wired into other beans property
-주입해야할 객체의 타입이 같으면 자동으로 주입해라 but 동일한 타입의 객체가 여러개 존재하면 에러다!!!!

autowire="constructor" : If a bean found with same type as the constructor argument of other bean, this bean will be wired into other bean constructor
-같은 타입의 변수를 받는 생성자가 존재하면 자동으로 주입해라

autowire="no" : No Autowiring. Same as explicitly specifying bean using ‘ref’ attribute
-자동으로 주입하지 말아라



package kr.human.di.config;

import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@ComponentScan("kr.human.di.vo") // kr.human.di.vo. 패키지에 있는 클래스들을 검색해서 자바빈을 자동으로 등록해라
public class AppConfig {

}


package kr.human.di.vo;

import org.springframework.stereotype.Component;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import javax.annotation.Resource;

@AllArgsConstructor
@NoArgsConstructor
@Data
@Component //빈을 자동으로 등록하라@
public class Application {
	
	//자동으로 주입해라!!!!
	@Resource(name="applicationUser")
    private ApplicationUser applicationUser;

}


package kr.human.di.vo;

import org.springframework.stereotype.Component;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@AllArgsConstructor
@NoArgsConstructor
@Data
@Component // 빈을 자동으로 등록하라!!!
public class  ApplicationUser {
	private String name="주인장";
}





@Autowired // 자동으로 객체를 주입해라!!!!

@Qualifier("ferari") // 동일한 타입의 객체가 복수로 존재할 경우 객체를 지정해 준다.

@Repository – Used to mark a bean as DAO Component on persistence layer
@Service – Used to mark a bean as Service Component on business layer
@Controller – Used to mark a bean as Controller Component on Presentation layer
@Configuration – Used to mark a bean as Configuration Component.
@Component – General purpose annotation, can be used as a replacement for above annotations.




